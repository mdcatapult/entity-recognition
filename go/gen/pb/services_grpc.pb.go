// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenizerClient is the client API for Tokenizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenizerClient interface {
	Tokenize(ctx context.Context, opts ...grpc.CallOption) (Tokenizer_TokenizeClient, error)
}

type tokenizerClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenizerClient(cc grpc.ClientConnInterface) TokenizerClient {
	return &tokenizerClient{cc}
}

func (c *tokenizerClient) Tokenize(ctx context.Context, opts ...grpc.CallOption) (Tokenizer_TokenizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tokenizer_ServiceDesc.Streams[0], "/Tokenizer/Tokenize", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenizerTokenizeClient{stream}
	return x, nil
}

type Tokenizer_TokenizeClient interface {
	Send(*Snippet) error
	Recv() (*Snippet, error)
	grpc.ClientStream
}

type tokenizerTokenizeClient struct {
	grpc.ClientStream
}

func (x *tokenizerTokenizeClient) Send(m *Snippet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tokenizerTokenizeClient) Recv() (*Snippet, error) {
	m := new(Snippet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokenizerServer is the server API for Tokenizer service.
// All implementations must embed UnimplementedTokenizerServer
// for forward compatibility
type TokenizerServer interface {
	Tokenize(Tokenizer_TokenizeServer) error
	mustEmbedUnimplementedTokenizerServer()
}

// UnimplementedTokenizerServer must be embedded to have forward compatible implementations.
type UnimplementedTokenizerServer struct {
}

func (UnimplementedTokenizerServer) Tokenize(Tokenizer_TokenizeServer) error {
	return status.Errorf(codes.Unimplemented, "method Tokenize not implemented")
}
func (UnimplementedTokenizerServer) mustEmbedUnimplementedTokenizerServer() {}

// UnsafeTokenizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenizerServer will
// result in compilation errors.
type UnsafeTokenizerServer interface {
	mustEmbedUnimplementedTokenizerServer()
}

func RegisterTokenizerServer(s grpc.ServiceRegistrar, srv TokenizerServer) {
	s.RegisterService(&Tokenizer_ServiceDesc, srv)
}

func _Tokenizer_Tokenize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TokenizerServer).Tokenize(&tokenizerTokenizeServer{stream})
}

type Tokenizer_TokenizeServer interface {
	Send(*Snippet) error
	Recv() (*Snippet, error)
	grpc.ServerStream
}

type tokenizerTokenizeServer struct {
	grpc.ServerStream
}

func (x *tokenizerTokenizeServer) Send(m *Snippet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tokenizerTokenizeServer) Recv() (*Snippet, error) {
	m := new(Snippet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Tokenizer_ServiceDesc is the grpc.ServiceDesc for Tokenizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tokenizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tokenizer",
	HandlerType: (*TokenizerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tokenize",
			Handler:       _Tokenizer_Tokenize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// RecognizerClient is the client API for Recognizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecognizerClient interface {
	GetStream(ctx context.Context, opts ...grpc.CallOption) (Recognizer_GetStreamClient, error)
}

type recognizerClient struct {
	cc grpc.ClientConnInterface
}

func NewRecognizerClient(cc grpc.ClientConnInterface) RecognizerClient {
	return &recognizerClient{cc}
}

func (c *recognizerClient) GetStream(ctx context.Context, opts ...grpc.CallOption) (Recognizer_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Recognizer_ServiceDesc.Streams[0], "/Recognizer/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &recognizerGetStreamClient{stream}
	return x, nil
}

type Recognizer_GetStreamClient interface {
	Send(*Snippet) error
	Recv() (*RecognizedEntity, error)
	grpc.ClientStream
}

type recognizerGetStreamClient struct {
	grpc.ClientStream
}

func (x *recognizerGetStreamClient) Send(m *Snippet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *recognizerGetStreamClient) Recv() (*RecognizedEntity, error) {
	m := new(RecognizedEntity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecognizerServer is the server API for Recognizer service.
// All implementations must embed UnimplementedRecognizerServer
// for forward compatibility
type RecognizerServer interface {
	GetStream(Recognizer_GetStreamServer) error
	mustEmbedUnimplementedRecognizerServer()
}

// UnimplementedRecognizerServer must be embedded to have forward compatible implementations.
type UnimplementedRecognizerServer struct {
}

func (UnimplementedRecognizerServer) GetStream(Recognizer_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedRecognizerServer) mustEmbedUnimplementedRecognizerServer() {}

// UnsafeRecognizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecognizerServer will
// result in compilation errors.
type UnsafeRecognizerServer interface {
	mustEmbedUnimplementedRecognizerServer()
}

func RegisterRecognizerServer(s grpc.ServiceRegistrar, srv RecognizerServer) {
	s.RegisterService(&Recognizer_ServiceDesc, srv)
}

func _Recognizer_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecognizerServer).GetStream(&recognizerGetStreamServer{stream})
}

type Recognizer_GetStreamServer interface {
	Send(*RecognizedEntity) error
	Recv() (*Snippet, error)
	grpc.ServerStream
}

type recognizerGetStreamServer struct {
	grpc.ServerStream
}

func (x *recognizerGetStreamServer) Send(m *RecognizedEntity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *recognizerGetStreamServer) Recv() (*Snippet, error) {
	m := new(Snippet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Recognizer_ServiceDesc is the grpc.ServiceDesc for Recognizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recognizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recognizer",
	HandlerType: (*RecognizerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Recognizer_GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}
