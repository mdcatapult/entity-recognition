// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	lib "gitlab.mdcatapult.io/informatics/software-engineering/entity-recognition/go/lib"

	pb "gitlab.mdcatapult.io/informatics/software-engineering/entity-recognition/go/gen/pb"

	snippet_reader "gitlab.mdcatapult.io/informatics/software-engineering/entity-recognition/go/lib/snippet-reader"

	sync "sync"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Err provides a mock function with given fields:
func (_m *Client) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Recognise provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) Recognise(_a0 <-chan snippet_reader.Value, _a1 lib.RecogniserOptions, _a2 *sync.WaitGroup) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(<-chan snippet_reader.Value, lib.RecogniserOptions, *sync.WaitGroup) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Result provides a mock function with given fields:
func (_m *Client) Result() []*pb.RecognizedEntity {
	ret := _m.Called()

	var r0 []*pb.RecognizedEntity
	if rf, ok := ret.Get(0).(func() []*pb.RecognizedEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.RecognizedEntity)
		}
	}

	return r0
}
